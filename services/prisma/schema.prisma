// This schema was built with prismabuilder.io
// https://www.prismabuilder.io/schemas/devstats

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Platform {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    name                String?
    raw_configuration   Json?
    Config              Config[]
}

model Config {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    value               Json
    platform            Platform? @relation(fields: [platformId], references: [id])
    User                User?     @relation(fields: [userId], references: [id])
    userId              String?   @db.ObjectId
    platformId          String?   @db.ObjectId
}

model User {
    id                      String @id @default(auto()) @map("_id") @db.ObjectId
    name                    String
    email                   String @unique
    image                   String?
    emailVerified           Boolean? @default(true)

    configs Config[]
    Account Account[]
    Session Session[]
}

model Account {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    type                String
    provider            String
    providerAccountId   String
    refresh_token       String? @db.String
    access_token        String? @db.String
    expires_at          Int?
    token_type          String?
    scope               String?
    id_token            String? @db.String
    session_state       String?
    userId              String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken        String   @unique
    userId              String   @db.ObjectId
    expires             DateTime
    user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier            String   @id @default(auto()) @map("_id") @db.ObjectId
  token                 String   @unique
  expires               DateTime
  @@unique([identifier, token])
}