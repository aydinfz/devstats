// This schema was built with prismabuilder.io
// https://www.prismabuilder.io/schemas/devstats

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    uid           String?   @db.String
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts     Account[]
    sessions     Session[]
    queryConfigs PlatformQueryConfig[]
    connections  Connection[]
    profiles     ConnectionProfile[]
}

model Platform {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    code         String  @unique
    config       Json
    require_auth Boolean

    queries      PlatformQuery[]
    queryConfigs PlatformQueryConfig[]
    Connection   Connection[]
}

model PlatformQuery {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    platformId String @db.ObjectId

    name          String
    title         String
    description   String
    requires_auth Boolean
    type          String[]

    queryConfigs PlatformQueryConfig[]
    platform     Platform              @relation(fields: [platformId], references: [id])
}

model PlatformQueryConfig {
    id              String @id @default(auto()) @map("_id") @db.ObjectId
    userId          String @db.ObjectId
    platformQueryId String @db.ObjectId
    platformId      String @db.ObjectId

    queryConfig Json?
    viewConfig  Json?

    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    platformQuery PlatformQuery @relation(fields: [platformQueryId], references: [id], onDelete: Cascade)
    platform      Platform      @relation(fields: [platformId], references: [id], onDelete: Cascade)
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    expires_at               Int?
    refresh_token_expires_in Int?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Connection {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    userId     String @db.ObjectId
    platformId String @db.ObjectId

    refresh_token            String  @db.String
    access_token             String  @db.String
    expires_at               Int
    refresh_token_expires_at Int?
    type                     String
    token_type               String
    scope                    String?

    profile ConnectionProfile?

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    platform Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
}

model ConnectionProfile {
    id           String @id @default(auto()) @map("_id") @db.ObjectId
    userId       String @db.ObjectId
    platformId   String @db.ObjectId
    connectionId String @unique @db.ObjectId

    name  String
    email String
    image String

    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    connection Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
